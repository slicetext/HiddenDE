(defpoll volume :interval "1s"
  :initial "15"
  "sh volume.sh")
(defpoll songInfo :interval "3s"
  :initial ""
  "sh song.sh")
(defpoll artistInfo :interval "3s"
  :initial ""
  "sh artist.sh")
(defpoll name :interval "99999999s"
  :initial "whoami"
  "whoami")
(defpoll time :interval "2s"
  :initial 'date +"%I:%M %p | %a, %b %d %Y"'
  'date +"%I:%M %p | %a, %b %d %Y"')
(defpoll date :interval "2s"
  :initial 'date +"%a, %b %d %Y"'
  'date +"%a, %b %d %Y"')
(defpoll up :interval "3s"
  :initial 'uptime -p'
  'uptime -p')
(defpoll wifi :interval "20s"
  :initial 'iwgetid -r'
  'iwgetid -r')
(defpoll battery :interval "10s"
  :initial 'cat /sys/class/power_supply/BAT0/capacity'
  'cat /sys/class/power_supply/BAT0/capacity')
(defpoll Bstatus :interval "10s"
  :initial 'cat /sys/class/power_supply/BAT0/status'
  'cat /sys/class/power_supply/BAT0/status')
(defpoll volM :interval "1s"
  :initial 'sh ./volume.sh'
  'sh ./volume.sh')
(defpoll work :interval "3s"
  :initial 'i3-msg -t get_workspaces | json_pp | grep "num" | cut -c 15 | tr "\n" "" '
  'i3-msg -t get_workspaces | json_pp | grep "num" | cut -c 15 | tr -d "\n"')



(defpoll bg :interval "1s"
  :initial 'cat ./config.txt | grep bg | cut -c 4-'
  'cat ./config.txt | grep bg | cut -c 4-')
(defpoll fg :interval "1s"
  :initial 'cat ./config.txt | grep fg | cut -c 4-'
  'cat ./config.txt | grep fg | cut -c 4-')
(defpoll nm :interval "1s"
  :initial 'cat ./config.txt | grep nm | cut -c 4-'
  'cat ./config.txt | grep nm | cut -c 4-')
(defpoll te :interval "1s"
  :initial 'cat ./config.txt | grep te | cut -c 4-'
  'cat ./config.txt | grep te | cut -c 4-')
(defpoll fm :interval "1s"
  :initial 'cat ./config.txt | grep fm | cut -c 4-'
  'cat ./config.txt | grep fm | cut -c 4-')

(defvar play false) 
(defvar bat false)
(defwidget vol[val]
  (scale :class "scale" :value val :hexpand true :onchange "pactl set-sink-volume 0 {}%" :halign "fill":style "width: 100%;")
)
(defwidget mute[]
  (button :onclick "pactl set-sink-mute 0 toggle" :class "mute" "󰝟")
)
(defwidget song[name]
  (label :text name :limit-width 4)
)
(defwidget artist[name]
  (label :text name :limit-width 4)
)
(defwidget pause[]
  (button :onclick "playerctl play-pause" "▶")
)
(defwidget prev[]
  (button :onclick "playerctl previous" "⏮")
)
(defwidget next[]
  (button :onclick "playerctl next" "⏭")
)

(defwindow dash
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :visible true
  :geometry (geometry :x "0%"
              :y "0%"
              :width "25%"
              :height "100%"
              :anchor "center left")
    (box :style "background-color:${bg}; margin: 5;color:${fg};padding:25; border: 2px solid ${fg}":spaceing 0 :orientation "v" :halign "fill" :valign "begin"(time :txt "${time}" :halign "start")(label :text "Volume: ${volM}" :halign "center")
(mute :valign "center")
        (box :orientation "h"  :hexpand false (vol :halign "fill" :val "${volume}"))
    (label :text "Brightness")
    (box :orientation "h" :halign "center" :valign "center" :hexpand true (inc_b)(label :text "    ")(dec_b))
    
    (box :orientation "h" :halign "center" :valign "center"
(label :text " ${wifi} ")
      
    (button :onclick "${nm}" "Manage Networks"))
   (label :text "󰂂 ${battery}% | ${Bstatus}")
    (box :orientation "h" 
      (box :orientation "v"
                
    (box :orientation "h" :halign "center" :valign "center"
      (button :onclick "${te}" "")(button :valign "center" :halign "center" :onclick "~/eww/target/release/eww update play=${!play}" "󰝚")
(button :onclick "firefox" "󰈹"))
    (box :orientation "h" :halign "center" :valign "center"
      (button :onclick "${fm}" "")(button :onclick "~/eww/target/release/eww close dash" "󰅝")(button :onclick "alacritty -e nvim" "")))
      
      (box :orientation "v" :visible play :spacing 0
      (box :orientation "h" (song :name "${songInfo}")(label :text "|")(artist :name "${artistInfo}")) 
    (box :orientation "h" (prev)(pause)(next))
    )

      )
     (label :text " ${name} | ${up}" :halign "begin")

      )
)
(defwidget time [txt]
  (label :text txt :style "font-size: 30px")
)
(defwidget inc_b []
  (button :onclick "lxqt-backlight_backend --inc 10 %" "+")
)
(defwidget dec_b []
  (button :onclick "lxqt-backlight_backend --dec 10 %" "-")
)
(defwidget close[]
  (button :onclick "~/eww/target/release/eww close dash" :style "background-color: #00000000" "Close" )
)








(defwindow over
  :stacking "fg"
  :windowtype "normal"
  :wm-ignore true
  :visible true
  :geometry (geometry :x "0%"
              :y "0%"
              :width "25%"
              :height "25%"
              :anchor "center center"
              )
 (box :orientation "v" :style "background-color:${bg}; color:${fg}; padding:3; border: 2px solid ${fg}"(box :orientation "h"(button :onclick "i3-msg workspace prev" "")(label :text "${work}")(button :onclick "i3-msg workspace next" ""))(button  :onclick "./nextW.sh" "new")))
